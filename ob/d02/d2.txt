strip()、split()
import zipfile 这时读写文件要加b 比如r+b(从零位开始)/w+b(清空)/a+b
避免多个程序对同一个文件进行操作 比如判断file.closed()是否true之类
大的增量日志分析 seek()、tell()就很有用了; file()/open()只是获取文件句柄(始末位置),read()/readlines()等才是将文件读进内存
字符串：
	find / rfind 反向查找 / index 大体同find,但找不到会报错	
	capitalize / upper / swapcase

	split  # str转list,默认以空格切分,当然str中若没空格就返回整个咯
	join   # list转str,默认以空格连接|将字符串、元组、列表、字典中的元素(只可以str不可int)以指定的字符(分隔符)连接生成一个新的字符串

	len
	cmp  # 字符串比较
	max  # 找字符串中最大字符 / min
	startswith / endswith

列表(js里的数组|有序,故有index()):
	append / pop / insert / remove / count / index / reverse / sort(默认按ascii排) / extend
	list[m:n]  # 切片
	list[m::n]  # 间隔取值
元组(即常量数组|有序,一旦生成,里面内容不可改变|只读属性|以圆括号表示|与列表可互为转换)
字典(无序|所有key唯一|js里的obj,添加修改都能通过['键']来控制|字典与列表可互相包含)
	D.get(key(, 缺省值))  # 同dict[key]。没有则返回缺省值(默认None)。[]用法则是在没有时会抛异常
	D.has_key(key)  # 有该键返回True,否则False
	D.keys()  # 返回键的列表
	D.values()  # 返回值的列表,其中可包含重复元素
	D.items()  # 将所有的字典项(键与值)以列表方式返回,但项返回式没有啥特殊顺序|纯粹的for i in D比for k,v in D.items()效率要高,盖后者先要转成list
	D.update(dict2)  # 增加/合并字典
	D.pop()  # 可指定删哪个键值对
	D.popitem()  # 会随机删除键值对。已空则抛异常
	D.setdefault()  # 若键&值已有,则新设之值不对旧值赋值
	D.clear()  # 同del dict
	D.copy()  # 见下 
	D.cmp(dict1, dict2)  # 比较字典.优先级为元素个数、键大小、键值大小|第一个大返回1，小返回-1，一样返回0
	字典的复制：
		dict1 = dict  # 别名
		dict2 = dict.copy()  #克隆,即另一个拷贝|'=赋值'操作会令内存地址指向一样,即改其中1个,另1个也会变;但copy()的一把不会,复制后2者就没干系了,除非在字典里又加了个list,而list不属于字典的表层,copy()对字典表层的操作会无视,但深层的操作就会影响到2者;深度拷贝需import copy后使用dict2 = copy.deepcopy(dict1),如此2者就在复制后彻底无关,即使嵌套了list也一样。
dict:
-查找和插入速度极快,不会随key增加而显著增加
-需要占用大量内存,内存浪费多
-key不可变
-默认无序
list:
-查找和插入时间随元素的增加而增加
-占用空间小,浪费内存少
-通过下标查询
-有序

集合的妙用  # set(dict)
-特点：
	无序
	元素不重复
-功能：
	关系测试  # x={1,2,3,4} y={3,4,5,6} => x & y或x | y或x - y或x ^ y
	去重
a = set([1,2,3,4])
b = set([3,4,5,6])
	a & b  # 求交集 a.intersection(b)
	a | b  # 求并集 a.union(b)
	a - b  # 求差集 a.difference(b)
	a ^ b  # 求对称差集 a.symmetric_difference(b)
	a.issubset(b)  # a是b的子集
	a.issuperset(b)  # a是否包含b


员工信息表
用户可以模糊查询员工信息
显示匹配了多少条，匹配字符需要高亮显示